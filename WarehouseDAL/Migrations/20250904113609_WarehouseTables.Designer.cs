// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseDAL.Data;

#nullable disable

namespace WarehouseDAL.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20250904113609_WarehouseTables")]
    partial class WarehouseTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WarehouseDAL.Models.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("TransferId");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("WarehouseDAL.Models.BoxItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("ItemId");

                    b.ToTable("BoxItems");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BarCode")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LotCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LotStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LotCode")
                        .IsUnique();

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Picking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PickingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Pickings");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("PickingId")
                        .HasColumnType("int");

                    b.Property<int>("SourceWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("PickingId");

                    b.HasIndex("SourceWarehouseId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("WarehouseDAL.Models.TransferItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedQty")
                        .HasColumnType("int");

                    b.Property<int>("ScannedQty")
                        .HasColumnType("int");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Box", b =>
                {
                    b.HasOne("WarehouseDAL.Models.Lot", "Lot")
                        .WithMany("Boxes")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WarehouseDAL.Models.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("WarehouseDAL.Models.BoxItem", b =>
                {
                    b.HasOne("WarehouseDAL.Models.Box", "Box")
                        .WithMany("BoxItems")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseDAL.Models.Item", "Item")
                        .WithMany("BoxItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Picking", b =>
                {
                    b.HasOne("WarehouseDAL.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Transfer", b =>
                {
                    b.HasOne("WarehouseDAL.Models.Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseDAL.Models.Picking", "Picking")
                        .WithMany("Transfers")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseDAL.Models.Warehouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Picking");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("WarehouseDAL.Models.TransferItem", b =>
                {
                    b.HasOne("WarehouseDAL.Models.Item", "Item")
                        .WithMany("TransferItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseDAL.Models.Transfer", "Transfer")
                        .WithMany("TransferItems")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Box", b =>
                {
                    b.Navigation("BoxItems");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Item", b =>
                {
                    b.Navigation("BoxItems");

                    b.Navigation("TransferItems");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Lot", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Picking", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("WarehouseDAL.Models.Transfer", b =>
                {
                    b.Navigation("TransferItems");
                });
#pragma warning restore 612, 618
        }
    }
}
